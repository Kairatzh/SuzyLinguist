"""
    format.py:
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–∞
"""

import os
from aiogram.types import FSInputFile

from src.utils.states import GlobalState


def formatizer(state: GlobalState) -> GlobalState:
    """
    –§–∏–Ω–∞–ª—å–Ω–∞—è —Ç—É–ª–∑–∞:
    - –°–∫–ª–µ–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –∫—É—Ä—Å–∞ –∏ PDF –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ state.final_message –∏ state.final_file.
    """
    try:
        course = getattr(state, "course", {})
        text_parts = [" *–ú–∏–Ω–∏-–∫—É—Ä—Å –≥–æ—Ç–æ–≤!*", ""]

        if "–í–≤–µ–¥–µ–Ω–∏–µ" in course:
            text_parts.append("üîπ *–í–≤–µ–¥–µ–Ω–∏–µ*")
            text_parts.append(course["–í–≤–µ–¥–µ–Ω–∏–µ"])
            text_parts.append("")

        if "–ü—Ä–∞–∫—Ç–∏–∫–∞" in course:
            text_parts.append("üìù *–ü—Ä–∞–∫—Ç–∏–∫–∞*")
            text_parts.append(course["–ü—Ä–∞–∫—Ç–∏–∫–∞"])
            text_parts.append("")

        if "–î–æ–ø. –º–∞—Ç–µ—Ä–∏–∞–ª—ã" in course:
            text_parts.append("üé• *–î–æ–ø. –º–∞—Ç–µ—Ä–∏–∞–ª—ã*")
            text_parts.append(course["–î–æ–ø. –º–∞—Ç–µ—Ä–∏–∞–ª—ã"])
            text_parts.append("")

        final_text = "\n".join(text_parts)

        if hasattr(state, "pdf_path") and os.path.exists(state.pdf_path):
            state.final_message = final_text
            state.final_file = FSInputFile(state.pdf_path)
        else:
            state.final_message = final_text
            state.final_file = None

    except Exception as e:
        state.logs.append(f"[finalizer] –û—à–∏–±–∫–∞: {e}")

    return state
