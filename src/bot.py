import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from dotenv import load_dotenv

from src.workflow import app
from src.utils.states import GlobalState

# ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ======
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
logging.basicConfig(level=logging.INFO)

if not TELEGRAM_BOT_TOKEN:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

# ====== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ======
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# ====== –•—ç–Ω–¥–ª–µ—Ä—ã ======

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç üëã –Ø –ª–∏–Ω–≥–≤–æ-–±–æ—Ç. –ù–∞–ø–∏—à–∏ —Ç–µ–º—É –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ‚Äî —Å–æ–±–µ—Ä—É –∫–æ–Ω—Å–ø–µ–∫—Ç, —Ç–µ—Å—Ç—ã –∏ –≤–∏–¥–µ–æ.")


@dp.message()
async def handle_message(message: types.Message):
    user_input = (message.text or "").strip()
    if not user_input:
        await message.answer("–ü–æ—Ö–æ–∂–µ, —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ. –ù–∞–ø–∏—à–∏ —Ç–µ–º—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è ‚úçÔ∏è")
        return

    # –°–±–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫ –≤–æ—Ä–∫—Ñ–ª–æ—É
    state = GlobalState(query=user_input)
    result = app.invoke(state)

    # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–π –∫—É—Ä—Å, –µ—Å–ª–∏ –æ–Ω —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –≤–æ—Ä–∫—Ñ–ª–æ—É
    if getattr(result, "course", None):
        course = result.course or {}
        parts = []
        summary_text = (course.get("summary") or result.summarize or "‚Äî").strip()
        if summary_text and summary_text != "‚Äî":
            parts.append("üìò –ö–æ–Ω—Å–ø–µ–∫—Ç\n\n" + summary_text)

        tests = course.get("tests") or result.test or []
        if isinstance(tests, list) and tests:
            preview = []
            for item in tests[:3]:
                q = item.get("question") if isinstance(item, dict) else None
                if q:
                    preview.append(f"‚Ä¢ {q}")
            if preview:
                parts.append("üìù –¢–µ—Å—Ç—ã (–ø—Ä–∏–º–µ—Ä)\n\n" + "\n".join(preview))

        videos = course.get("videos") or result.youtube or []
        if isinstance(videos, list) and videos:
            links = [f"- {link}" for link in videos]
            parts.append("‚ñ∂Ô∏è –í–∏–¥–µ–æ\n\n" + "\n".join(links))

        text = "\n\n".join(parts) if parts else "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Ç–µ–º–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å."
        await message.answer(text)
        return

    # –ï—Å–ª–∏ –∫—É—Ä—Å –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ, —á—Ç–æ –µ—Å—Ç—å –ø–æ —á–∞—Å—Ç—è–º
    sent_any = False

    if getattr(result, "summarize", None):
        await message.answer("üìò –ö–æ–Ω—Å–ø–µ–∫—Ç\n\n" + result.summarize)
        sent_any = True

    if getattr(result, "test", None):
        tests = result.test or []
        if isinstance(tests, list) and tests:
            preview = []
            for item in tests[:3]:
                q = item.get("question") if isinstance(item, dict) else None
                if q:
                    preview.append(f"‚Ä¢ {q}")
            if preview:
                await message.answer("üìù –¢–µ—Å—Ç—ã (–ø—Ä–∏–º–µ—Ä)\n\n" + "\n".join(preview))
                sent_any = True

    if getattr(result, "youtube", None):
        videos = result.youtube or []
        if isinstance(videos, list) and videos:
            links = [f"- {link}" for link in videos]
            await message.answer("‚ñ∂Ô∏è –í–∏–¥–µ–æ\n\n" + "\n".join(links))
            sent_any = True

    if not sent_any:
        await message.answer("üòÖ –ù–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!")


# ====== –ó–∞–ø—É—Å–∫ ======
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
