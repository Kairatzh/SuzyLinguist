import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command

from src.workflow import app
from src.utils.states import GlobalState

# ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ======
API_TOKEN = "–¢–í–û–ô_–¢–û–ö–ï–ù_–ë–û–¢–ê"  # –ø–æ–ª—É—á–∏ —É @BotFather
logging.basicConfig(level=logging.INFO)

# ====== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ======
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# ====== –•—ç–Ω–¥–ª–µ—Ä—ã ======

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç üëã –Ø –ª–∏–Ω–≥–≤–æ-–±–æ—Ç. –ù–∞–ø–∏—à–∏ –º–Ω–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ —Ç–µ–º—É –¥–ª—è –∫—É—Ä—Å–∞!")


@dp.message()
async def handle_message(message: types.Message):
    user_input = message.text.strip()

    # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ GlobalState
    state = GlobalState(query=user_input, logs=[])

    # –ü—Ä–æ–≥–æ–Ω—è–µ–º —á–µ—Ä–µ–∑ workflow
    result = app.invoke(state)

    # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏
    if hasattr(result, "grammar_result"):
        await message.answer(f"‚úçÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏:\n\n{result.grammar_result}")
        return

    # –ï—Å–ª–∏ —ç—Ç–æ –∫—É—Ä—Å
    if hasattr(result, "course"):
        course = result.course
        text = (
            "üìö *–ú–∏–Ω–∏-–∫—É—Ä—Å –≥–æ—Ç–æ–≤!*\n\n"
            f"*–í–≤–µ–¥–µ–Ω–∏–µ:*\n{course.get('–í–≤–µ–¥–µ–Ω–∏–µ', '‚Äî')}\n\n"
            f"*–ü—Ä–∞–∫—Ç–∏–∫–∞:*\n{course.get('–ü—Ä–∞–∫—Ç–∏–∫–∞', '‚Äî')}\n\n"
            f"*–î–æ–ø. –º–∞—Ç–µ—Ä–∏–∞–ª—ã:*\n{course.get('–î–æ–ø. –º–∞—Ç–µ—Ä–∏–∞–ª—ã', '‚Äî')}\n"
        )
        await message.answer(text, parse_mode="Markdown")
        return

    # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
    await message.answer("üòÖ –ù–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")


# ====== –ó–∞–ø—É—Å–∫ ======
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
